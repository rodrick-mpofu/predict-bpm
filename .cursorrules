# BPM Prediction - Kaggle Playground Series S5E9
# Configuration for AI coding assistants

## Project Context
You are working on a Kaggle competition to predict the beats-per-minute (BPM) of songs using machine learning regression techniques. This is part of the Tabular Playground Series Season 5, Episode 9.

## Project Goals
- Build regression models to predict continuous BPM values
- Minimize Root Mean Squared Error (RMSE)
- Focus on feature engineering and ensemble methods
- Competition deadline: September 30, 2025

## Key Technical Requirements
- **Target Variable**: BeatsPerMinute (continuous regression)
- **Evaluation Metric**: Root Mean Squared Error (RMSE)
- **Dataset**: Synthetically generated from real music data
- **Submission Format**: CSV with ID,BeatsPerMinute columns

## Coding Standards & Preferences
- Use Python 3.8+
- Prefer pandas for data manipulation
- Use scikit-learn as primary ML library
- Include XGBoost, LightGBM for gradient boosting
- Follow PEP 8 style guidelines
- Add docstrings for all functions
- Include type hints where helpful

## Project Structure
```
├── data/                   # Competition datasets
├── notebooks/              # Jupyter notebooks for analysis
├── src/                    # Python modules
│   ├── data_preprocessing.py
│   ├── feature_engineering.py
│   ├── models.py
│   └── utils.py
├── submissions/            # Generated predictions
└── requirements.txt
```

## ML Pipeline Preferences
1. **Data Exploration**: Focus on BPM distribution, feature correlations, outlier detection
2. **Feature Engineering**: Create polynomial features, interactions, scaling
3. **Model Selection**: Start with linear regression baseline, then tree-based models
4. **Validation**: Use 5-fold cross-validation, track RMSE consistently
5. **Ensemble**: Combine multiple models for final predictions

## Common Tasks & Patterns
- Always use cross-validation for model evaluation
- Track experiments with consistent logging
- Create reusable preprocessing pipelines
- Generate feature importance plots
- Save models using joblib or pickle
- Include error handling for data loading
- Use random seeds for reproducibility

## Libraries to Prioritize
- pandas, numpy (data manipulation)
- scikit-learn (preprocessing, models, metrics)
- xgboost, lightgbm (gradient boosting)
- matplotlib, seaborn (visualization)
- joblib (model persistence)

## Code Quality Guidelines
- Write modular, reusable functions
- Include comprehensive error handling
- Add progress bars for long-running operations
- Log important metrics and decisions
- Comment complex feature engineering logic
- Use meaningful variable names

## Specific Focus Areas
- **Audio Features**: Understand relationships between audio characteristics and BPM
- **Regression Techniques**: Optimize for RMSE, not classification metrics
- **Feature Engineering**: Create domain-specific features for music data
- **Model Interpretability**: Understand what drives BPM predictions
- **Ensemble Methods**: Combine diverse models effectively

## Avoid
- Classification metrics (accuracy, precision, recall)
- Overfitting to public leaderboard
- Hardcoded file paths
- Missing data validation steps
- Inconsistent random seeds
- Uncommitted experimental code

## When Writing Code, Always:
1. Include proper imports at the top
2. Add docstrings explaining purpose and parameters
3. Use descriptive variable names
4. Include error handling for file operations
5. Add progress tracking for long operations
6. Save intermediate results for debugging
7. Use cross-validation for all model evaluation

## Submission Reminders
- Final predictions must be continuous values
- Submission format: ID,BeatsPerMinute
- Double-check for missing predictions
- Validate submission file format before uploading